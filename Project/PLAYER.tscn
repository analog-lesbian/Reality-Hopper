[gd_scene load_steps=20 format=2]

[ext_resource path="res://PLAYER.gd" type="Script" id=1]
[ext_resource path="res://Filesystem/HUD/PULSE_2.png" type="Texture" id=2]
[ext_resource path="res://Filesystem/HUD/PULSE_1.png" type="Texture" id=3]
[ext_resource path="res://Filesystem/HUD/PULSE_3.png" type="Texture" id=4]
[ext_resource path="res://PULSE_UI.gd" type="Script" id=5]
[ext_resource path="res://Filesystem/HUD/RELAXED_1.png" type="Texture" id=8]
[ext_resource path="res://Filesystem/HUD/RELAXED_2.png" type="Texture" id=9]
[ext_resource path="res://Filesystem/HUD/RELAXED_3.png" type="Texture" id=10]

[sub_resource type="BoxShape" id=1]

[sub_resource type="Environment" id=2]
ambient_light_color = Color( 1, 1, 1, 1 )

[sub_resource type="Animation" id=3]
resource_name = "fade"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("FADE:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 0.374806 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

void fragment() {
	vec3 input_color;vec4 _tex_read = texture(TEXTURE, UV);
	input_color = _tex_read.rgb;
	
	vec3 color_hsv; {
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + TIME / 15.00), 1.0f);

	vec3 color_rgb; {
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www); //number seems to be located HERE!
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}
	
	_tex_read = vec4(color_rgb.rgb,_tex_read.a);
	COLOR.rgba = _tex_read;
	
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/Shift_Hue = null

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

vec2 d1stort1onUVAnimatedFunc(vec2 _uv_d1st, float _d1stX_d1st, float _waveX_d1st, float _t1me_d1st){
	_uv_d1st.x += sin(_uv_d1st.y * _waveX_d1st + _t1me_d1st) * _d1stX_d1st;
	return _uv_d1st;
}

void fragment() {
	vec3 input_color;
	vec3 n_out3p0; {n_out3p0.xy = d1stort1onUVAnimatedFunc(UV.xy, 0.04000, 5.00000, TIME*1.00000);}
	vec4 _tex_read = texture(TEXTURE, n_out3p0.xy);
	input_color = _tex_read.rgb;
	
	vec3 color_hsv; {
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + TIME / 30.00), 1.0f);

	vec3 color_rgb; {
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www); //number seems to be located HERE!
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}
	
	_tex_read = vec4(color_rgb.rgb,_tex_read.a);
	COLOR.rgba = _tex_read;
	
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/Shift_Hue = null

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

vec2 d1stort1onUVAnimatedFunc(vec2 _uv_d1st, float _d1stX_d1st, float _waveX_d1st, float _t1me_d1st){
	_uv_d1st.x += sin(_uv_d1st.y * _waveX_d1st + _t1me_d1st) * _d1stX_d1st;
	return _uv_d1st;
}

void fragment() {
	vec3 input_color;
	vec3 n_out3p0; {n_out3p0.xy = d1stort1onUVAnimatedFunc(UV.xy, 0.02000, 5.00000, TIME*1.00000);}
	vec4 _tex_read = texture(TEXTURE, n_out3p0.xy);
	input_color = _tex_read.rgb;
	
	vec3 color_hsv; {
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + TIME / 30.00), 1.0f);

	vec3 color_rgb; {
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www); //number seems to be located HERE!
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}
	
	_tex_read = vec4(color_rgb.rgb,_tex_read.a);
	COLOR.rgba = _tex_read;
	
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/Shift_Hue = null

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

vec2 d1stort1onUVAnimatedFunc(vec2 _uv_d1st, float _d1stX_d1st, float _waveX_d1st, float _t1me_d1st){
	_uv_d1st.x += sin(_uv_d1st.y * _waveX_d1st + _t1me_d1st) * _d1stX_d1st;
	return _uv_d1st;
}

void fragment() {
	vec3 input_color;
	vec3 n_out3p0; {n_out3p0.xy = d1stort1onUVAnimatedFunc(UV.xy, 0.01000, 5.00000, TIME*1.00000);}
	vec4 _tex_read = texture(TEXTURE, n_out3p0.xy);
	input_color = _tex_read.rgb;
	
	vec3 color_hsv; {
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + TIME / 30.00), 1.0f);

	vec3 color_rgb; {
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www); //number seems to be located HERE!
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}
	
	_tex_read = vec4(color_rgb.rgb,_tex_read.a);
	COLOR.rgba = _tex_read;
	
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/Shift_Hue = null

[node name="PLAYER" type="KinematicBody"]
script = ExtResource( 1 )

[node name="cast" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, -100, 0 )
collision_mask = 7

[node name="COL_SHAPE" type="CollisionShape" parent="."]
shape = SubResource( 1 )

[node name="CAMERA" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 12 )
environment = SubResource( 2 )
fov = 50.0

[node name="GFX_PLACEHOLDER" type="CSGBox" parent="."]

[node name="REALITY_TRANSITION" type="CanvasLayer" parent="."]

[node name="FADE" type="ColorRect" parent="REALITY_TRANSITION"]
visible = false
margin_right = 426.0
margin_bottom = 240.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ANIM" type="AnimationPlayer" parent="REALITY_TRANSITION"]
anims/fade = SubResource( 3 )

[node name="PULSE_HUD" type="Container" parent="."]
visible = false
material = SubResource( 5 )
margin_top = 0.487337
margin_bottom = 0.487337
script = ExtResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PULSE_3" type="TextureRect" parent="PULSE_HUD"]
use_parent_material = true
texture = ExtResource( 4 )
stretch_mode = 4

[node name="PULSE_2" type="TextureRect" parent="PULSE_HUD"]
use_parent_material = true
texture = ExtResource( 2 )

[node name="PULSE_1" type="TextureRect" parent="PULSE_HUD"]
use_parent_material = true
margin_right = 185.0
margin_bottom = 90.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 0.0
texture = ExtResource( 3 )

[node name="REALITY_HUD" type="Control" parent="."]
visible = false
margin_right = 426.0
margin_bottom = 240.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RELAXED_3" type="TextureRect" parent="REALITY_HUD"]
material = SubResource( 7 )
texture = ExtResource( 10 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RELAXED_2" type="TextureRect" parent="REALITY_HUD"]
material = SubResource( 9 )
texture = ExtResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RELAXED_1" type="TextureRect" parent="REALITY_HUD"]
pause_mode = 2
material = SubResource( 11 )
texture = ExtResource( 8 )
stretch_mode = 3
__meta__ = {
"_edit_use_anchors_": false
}
